'''
Напишите тесты на любые 3 задания из модуля «Основы языка программирования Python».
Используйте своё решение домашнего задания.
При написании тестов не забывайте использовать параметризацию.
Рекомендации по тестам: если у вас в функциях информация выводилась (print),
то теперь её лучше возвращать (return), чтобы можно было протестировать.
'''
from unittest import TestCase

import courses
from courses import create_courses_list, get_duration

class TestCode(TestCase):
    def setUp(self) -> None:
        self.test_data1 = [
            [
                ["Java-разработчик с нуля", "Fullstack-разработчик на Python", "Python-разработчик с нуля", "Frontend-разработчик с нуля"],
                [
                    ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
                    ["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский", "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая", "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
                    ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев", "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
                    ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин", "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
                ],
                [14, 20, 12, 20]
            ],
            [
                ["Java-разработчик с нуля","Fullstack-разработчик на Python"],
                ["Александр Бардин"],
                [45,8]
            ]
        ]
        self.test_data2 = [
            [
                ["Java-разработчик с нуля", "Fullstack-разработчик на Python", "Python-разработчик с нуля", "Frontend-разработчик с нуля"],
                [
                    ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
                    ["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский", "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая", "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
                    ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев", "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
                    ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин", "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
                ],
                [14, 20, 12, 20]
            ],
            [
                ["Java-разработчик с нуля","Fullstack-разработчик на Python"],
                ["Александр Бардин"],
                [45, -8]
            ]
        ]

        self.test_data3 = [
            [
                ["Java-разработчик с нуля", "Fullstack-разработчик на Python", "Python-разработчик с нуля",
                 "Frontend-разработчик с нуля"],
                [
                    ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков",
                     "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев",
                     "Максим Батырев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков",
                     "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк",
                     "Павел Дерендяев"],
                    ["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский",
                     "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая",
                     "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко",
                     "Елена Никитина"],
                    ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев",
                     "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина",
                     "Азамат Искаков", "Роман Гордиенко"],
                    ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен",
                     "Александр Фитискин", "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков",
                     "Николай Лопин", "Михаил Ларченко"]
                ],
                [14, 20, 12, 20]
            ],
            [
                ["Java-разработчик с нуля", "Fullstack-разработчик на Python"],
                ["Александр Бардин"],
                [45, 8]
            ]
        ]
        self.dict_res = {
            12: [2],
            14: [0],
            20: [1, 3]
        }

    def test_non_empty_course_list(self):
        for i, (a, b, c) in enumerate(self.test_data1):
            with self.subTest(i):
                result = len(create_courses_list(a, b, c))
                self.assertGreater(result, 0)

    def test_positive_cnt_hrs(self):
        for i, (a, b, c) in enumerate(self.test_data2):
            with self.subTest(i):
                for el in c:
                    self.assertGreater(el, 0, f"В переданном списке {c} значений содержится значение {el} < 0")

    def test_russian_letters(self):
        for i, (a, b, c) in enumerate(self.test_data3):
            with self.subTest(i):
                pattern =r'[А-Яа-я\s]'
                for el in b:
                    if isinstance(el, list):
                        for name in el:
                            for letter in name:
                                self.assertRegex(letter, pattern, name)
                    elif isinstance(el, str):
                        for letter in el:
                            self.assertRegex(letter, pattern, el)

    def test_hrs_in_dict(self):
        result = courses.get_duration(courses.create_courses_list(self.test_data1[0][0],self.test_data1[0][1],self.test_data1[0][2]))
        self.assertDictEqual(self.dict_res,result,f'Ожидается {self.dict_res} получен {result}')